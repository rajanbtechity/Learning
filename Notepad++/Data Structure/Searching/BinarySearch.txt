Binary Search

1. Python visualization link
https://www.cs.usfca.edu/~galles/visualization/Search.html

2. Python implementation 

"""You're going to write a binary search function.
You should use an iterative approach - meaning
using loops.
Your function should take two inputs:
a Python list to search through, and the value
you're searching for.
Assume the list only has distinct elements,
meaning there are no repeated values, and
elements are in a strictly increasing order.
Return the index of value, or -1 if the value
doesn't exist in the list."""
"""visualization link https://www.cs.usfca.edu/~galles/visualization/Search.html"""
def binary_search(input_array, value):
    """Your code goes here."""
    h=len(input_array)-1
    l=0
    m=0
    while(l<=h):
        m=l+(h-l)//2

        if input_array[m]==value:
            return m
        elif input_array[m]>value:
            h=m-1
        else:
            l=m+1
    return -1

test_list = [1,3,9,11,15,19,29]
test_val1 = 25
test_val2 = 15
print(binary_search(test_list, test_val1))
print(binary_search(test_list, test_val2))

3. Java implementation
package com.learn.SearchAlgo;

// python visualization example https://www.cs.usfca.edu/~galles/visualization/Search.html

public class BinarySearch {

	public static int BinarySearch(int[] arry,int x)
	{
		int l=0,h=arry.length-1,m=0;

		while(l<=h)
		{
			m=l+((h-l)/2);
			if(arry[m]==x)
				return m;
			else if(x>arry[m])
					l=m+1;
				else
					h=m-1;
		}
		return -1;
	
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Starting");
		int[] array={1,2,3,4,5,6,7,8,9};
		int index=BinarySearch(array,5);
		{
			if(index==-1)
				System.out.println("Element not found");
			
			else
				System.out.println("Element Found at index:"+index);
			
		}

	}

}
