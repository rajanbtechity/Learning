1. Difference between Integer.class and int.class. Annotation2 class generated NoSuchMethodException when used Integer.class
2. Same annotation can be defined in different classes. Whats the scope of an annotation.
3. ArrayList<Message> list=new ArrayList<Message>(messages.values());

how this is different from  (ArrayList<Message>) messages.values()

4. 	private Map<Long, Message> messages=DatabaseClass.getMessages();

for(Message message:messages.values())

in for each variable is of type Message so it will iterate through messages.values which are of Message type and not on messages.

below statement is wrong.


for(Message message:messages)

5. Does remove method in map has a return type of the value of the map and put doesn't have any return type?.

public Message removeMessage(long id){
		return messages.remove(id);
	}
	

	
	
	
	public Message updateMessage(Message message){
		if(message.getId()<=0){
			return null;
		}
		messages.put(message.getId(), message);
		return message;
	}
	
	Below one didn't work
	public Message updateMessage(Message message){
		if(message.getId()<=0){
			return null;
		}
		return messages.put(message.getId(), message);
	}
	
	
	
6. Sort a 2D Array based on some column

Arrays.sort(queries, new Comparator<int[]>() { 
           
           @Override              
           // Compare values according to columns 
           public int compare(final int[] entry1,  
                              final int[] entry2) { 
   
             // To sort in descending order revert  
             // the '>' Operator 
             if (entry1[0] > entry2[0]) 
                 return 1; 
             else
                 return -1; 
           } 
         });  // End o
         
         
7. Adding an element to a list which is within a list

ArrayList<Integer> emptyList=new ArrayList<Integer>();
        List<ArrayList<Integer>> seqList=new ArrayList<ArrayList<Integer>>();
      for(int i=0;i<n;i++)
      {
          seqList.add(new ArrayList(emptyList));
      }
      
      
      Above is the correct way of adding.
      
      when i used seqList.add(emptyList); and 
      then tried to add 
      seqList.get(0).add(5)
      
      and then print 
      seqList.get(0)
      seqList.get(1)
      
      both gives same output.